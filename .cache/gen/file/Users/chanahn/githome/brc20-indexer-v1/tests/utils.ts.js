export function hexToBytes(hexString) {
    if (hexString.length === 0) {
        return new Uint8Array(0);
    } else {
        return Uint8Array.from(hexString.match(/.{1,2}/g).map((byte)=>parseInt(byte, 16)));
    }
}
const byteToHexCache = new Array(0xff);
for(let n = 0; n <= 0xff; ++n){
    byteToHexCache[n] = n.toString(16).padStart(2, '0');
}
export function bytesToHex(uint8a) {
    const hexOctets = new Array(uint8a.length);
    for(let i = 0; i < uint8a.length; ++i)hexOctets[i] = byteToHexCache[uint8a[i]];
    return hexOctets.join('');
}
export function hexReverse(hexString) {
    return bytesToHex(hexToBytes(hexString).reverse());
}
function isSegwitTxObject(obj) {
    return obj.segwitMarker !== undefined && obj.segwitVersion !== undefined && obj.witnesses !== undefined;
}
export function expectHeaderObject(block, expectedHeaderObject) {
    const headerObject = block.receipts[0].result.expectOk().expectTuple();
    headerObject.version.expectUint(expectedHeaderObject.version);
    headerObject.parent.expectBuff(hexToBytes(expectedHeaderObject.parent));
    headerObject["merkle-root"].expectBuff(hexToBytes(expectedHeaderObject.merkleRoot));
    headerObject.timestamp.expectUint(expectedHeaderObject.timestamp);
    headerObject.nbits.expectUint(expectedHeaderObject.nbits);
    headerObject.nonce.expectUint(expectedHeaderObject.nonce);
}
export function expectTxObject(block, expectedTxObject) {
    const resultTxObject = block.receipts[0].result.expectOk().expectTuple();
    resultTxObject.version.expectUint(expectedTxObject.version);
    resultTxObject.locktime.expectUint(expectedTxObject.locktime);
    for(let index = 0; index < expectedTxObject.ins.length; index++){
        const insObject = resultTxObject.ins.expectList()[index].expectTuple();
        const outpoint = insObject.outpoint.expectTuple();
        outpoint.hash.expectBuff(hexToBytes(expectedTxObject.ins[index].outpoint.hash));
        outpoint.index.expectUint(expectedTxObject.ins[index].outpoint.index);
        insObject.scriptSig.expectBuff(hexToBytes(expectedTxObject.ins[index].scriptSig));
        insObject.sequence.expectUint(expectedTxObject.ins[index].sequence);
    }
    for(let index1 = 0; index1 < expectedTxObject.outs.length; index1++){
        const outObject = resultTxObject.outs.expectList()[index1].expectTuple();
        outObject.scriptPubKey.expectBuff(hexToBytes(expectedTxObject.outs[index1].scriptPubKey));
        outObject.value.expectUint(expectedTxObject.outs[index1].value);
    }
    if (isSegwitTxObject(expectedTxObject)) {
        for(let index2 = 0; index2 < expectedTxObject.witnesses.length; index2++){
            const witnessObject = resultTxObject.witnesses.expectList()[index2].expectList();
            if (witnessObject.length) {
                for(let witnessItemIndex = 0; witnessItemIndex < witnessObject.length; witnessItemIndex++){
                    witnessObject[witnessItemIndex].expectBuff(hexToBytes(expectedTxObject.witnesses[index2][witnessItemIndex]));
                }
            } else {
                if (expectedTxObject.witnesses[index2].length > 0) {
                    throw new Error("Expected witness item list to be empty");
                }
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,