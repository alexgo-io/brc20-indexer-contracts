import { test, TestSuite } from "./test_suite.ts";
const hooksLocked = [];
function areHooksLocked() {
    return hooksLocked[hooksLocked.length - 1] ?? false;
}
function lockHooks() {
    if (hooksLocked.length === 0) {
        throw new Error("cannot lock hooks on global context");
    }
    hooksLocked[hooksLocked.length - 1] = true;
}
let currentContext = null;
let currentSuite = null;
function describe(a, fn) {
    let options;
    if (typeof a === "string") {
        options = {
            name: a
        };
    } else {
        fn = a.fn;
        options = {
            name: a.name
        };
        if (typeof a.ignore !== "undefined") options.ignore = a.ignore;
        if (typeof a.only !== "undefined") options.only = a.only;
        if (typeof a.sanitizeOps !== "undefined") {
            options.sanitizeOps = a.sanitizeOps;
        }
        if (typeof a.sanitizeResources !== "undefined") {
            options.sanitizeResources = a.sanitizeResources;
        }
        if (typeof a.sanitizeExit !== "undefined") {
            options.sanitizeExit = a.sanitizeExit;
        }
    }
    const parent = currentSuite;
    if (parent) options.suite = parent;
    const suite = new TestSuite(options);
    const parentContext = currentContext;
    currentContext = {
        beforeEach: false,
        afterEach: false,
        beforeAll: false,
        afterAll: false
    };
    if (currentSuite) lockHooks();
    hooksLocked.push(false);
    currentSuite = suite;
    try {
        fn();
    } finally{
        hooksLocked.pop();
        currentContext = parentContext;
        currentSuite = parent;
    }
}
function focusDescribe(ignore, only, a, fn) {
    let options;
    if (typeof a === "string") {
        options = {
            name: a,
            fn: fn
        };
    } else {
        options = {
            ...a
        };
    }
    options.ignore = ignore;
    options.only = only;
    describe(options);
}
function fdescribe(a, fn) {
    focusDescribe(false, true, a, fn);
}
function xdescribe(a, fn) {
    focusDescribe(true, false, a, fn);
}
function it(a, fn) {
    if (currentSuite) lockHooks();
    let options;
    if (typeof a === "string") {
        options = {
            name: a,
            fn: fn
        };
    } else {
        options = {
            name: a.name,
            fn: a.fn
        };
        if (typeof a.ignore !== "undefined") options.ignore = a.ignore;
        if (typeof a.only !== "undefined") options.only = a.only;
        if (typeof a.sanitizeOps !== "undefined") {
            options.sanitizeOps = a.sanitizeOps;
        }
        if (typeof a.sanitizeResources !== "undefined") {
            options.sanitizeResources = a.sanitizeResources;
        }
        if (typeof a.sanitizeExit !== "undefined") {
            options.sanitizeExit = a.sanitizeExit;
        }
    }
    if (currentSuite) options.suite = currentSuite;
    test(options);
}
function each(a, cases, fn) {
    let myOptions;
    if (typeof a === "string") {
        myOptions = {
            name: a,
            fn: fn,
            cases: cases
        };
    } else {
        myOptions = a;
    }
    myOptions.cases.forEach((c)=>it({
            name: Array.isArray(c) ? `${myOptions.name}: ${c}` : `${myOptions.name}: ${c.name}`,
            fn: Array.isArray(c) ? ()=>myOptions.fn(...c) : ()=>myOptions.fn(...c.params),
            ignore: myOptions.ignore,
            only: myOptions.only,
            sanitizeOps: myOptions.sanitizeOps,
            sanitizeResources: myOptions.sanitizeResources,
            sanitizeExit: myOptions.sanitizeExit
        }));
}
function focusIt(ignore, only, a, fn) {
    let options;
    if (typeof a === "string") {
        options = {
            name: a,
            fn: fn
        };
    } else {
        options = {
            ...a
        };
    }
    options.ignore = ignore;
    options.only = only;
    it(options);
}
function fit(a, fn) {
    focusIt(false, true, a, fn);
}
function xit(a, fn) {
    focusIt(true, false, a, fn);
}
function setHook(key, fn) {
    if (!currentSuite) throw new Error(`${key} not allowed globally`);
    if (areHooksLocked()) {
        throw new Error(`${key} must be called before child suites and tests in suite`);
    }
    if (currentContext[key]) {
        throw new Error(`${key} already called for suite`);
    }
    currentContext[key] = true;
    const suite = currentSuite;
    TestSuite.setHooks(suite, {
        [key]: fn
    });
}
/** Run some shared setup before each test in the suite. */ export function beforeEach(fn) {
    setHook("beforeEach", fn);
}
/** Run some shared teardown after each test in the suite. */ export function afterEach(fn) {
    setHook("afterEach", fn);
}
/** Run some shared setup before all of the tests in the suite. */ export function beforeAll(fn) {
    setHook("beforeAll", fn);
}
/** Run some shared teardown after all of the tests in the suite. */ export function afterAll(fn) {
    setHook("afterAll", fn);
}
export { describe, each, fdescribe, fit, it, xdescribe, xit };
//# sourceMappingURL=data:application/json;base64,